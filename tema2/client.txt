Pentru client folosim:

/* codul de eroare returnat de anumite apeluri */
extern int errno;

/* portul de conectare la server*/
int port;

int main (int argc, char *argv[])
{
  int sd;			// descriptorul de socket
  struct sockaddr_in server;	// structura folosita pentru conectare 
  //declaratii de variabile

  /* exista toate argumentele in linia de comanda? */
  if (argc != 3)
    {
      printf ("Sintaxa: %s <adresa_server> <port>\n", argv[0]);
      return -1;
    }

  /* stabilim portul */
  port = atoi (argv[2]);

  /* cream socketul */
  if ((sd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
    {
      perror ("Eroare la socket().\n");
      return errno;
    }

  /* umplem structura folosita pentru realizarea conexiunii cu serverul */
  /* familia socket-ului */
  server.sin_family = AF_INET;
  /* adresa IP a serverului */
  server.sin_addr.s_addr = inet_addr(argv[1]);
  /* portul de conectare */
  server.sin_port = htons (port);
  
  /* ne conectam la server */
  if (connect (sd, (struct sockaddr *) &server,sizeof (struct sockaddr)) == -1)
    {
      perror ("[client]Eroare la connect().\n");
      return errno;
    }
while(match==0){
	  if (read (sd, array, 51) < 0) //citirea matricii
		{
		  perror ("[client]Eroare la read() de la server.\n");
		  return errno;
		}
		
		if(array[50]==666)//daca pe pozitia 50 a array-ului apare valoarea 666 inseamna ca meciul s-a terminat si jucatorul i a castigat
		{
			if(/*sah-mat pe regele propriu*/)
				printf("YOU LOST THIS ONE. GOOD LUCK NEXT TIME LAD");
			else
				printf("YOU WON! GG MEDIUM");
			match=1;
					if (write (sd, array[], 51) <= 0)
				{
				  perror ("[server]Eroare la write() catre client.\n");
				  break;
				}
			
		}
	  /* afisarea matricii ce reprezinta tabla de sah */
	  while(valid){
	  /* primirea mutarii sub forma: elementul de pe pozitia ij trece pe kl*/
		  if(/*verificarea validitatii mutarii facute*/)
			valid=1;
	  }
	  /* trimiterea mesajului la server */
	  if (write (sd, array, 50) <= 0)
		{
		  perror ("[client]Eroare la write() spre server.\n");
		  return errno;
		}
		
}
  /* inchidem conexiunea, am terminat */
  close (sd);
}