Pentru server folosim:
/* portul folosit */
#define PORT 12345

/* codul de eroare returnat de anumite apeluri */
extern int errno;

int main ()
{
  //definim variabile
  struct sockaddr_in server;	// structura folosita de server
  struct sockaddr_in from;	
  int sd;			//descriptorul de socket 

  /* crearea unui socket */
  if ((sd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
    {
      perror ("[server]Eroare la socket().\n");
      return errno;
    }
	else
	printf("[server] Conectare la socket.\n"");

  /* pregatirea structurilor de date */
  bzero (&server, sizeof (server));
  bzero (&from, sizeof (from));
  
  /* umplem structura folosita de server */
  /* stabilirea familiei de socket-uri */
    server.sin_family = AF_INET;	
	
  /* acceptam orice adresa */
    server.sin_addr.s_addr = htonl (INADDR_ANY);
	
  /* utilizam un port utilizator */
    server.sin_port = htons (PORT);
  
  /* atasam socketul */
  if (bind (sd, (struct sockaddr *) &server, sizeof (struct sockaddr)) == -1)
    {
      perror ("[server]Eroare la bind().\n");
      return errno;
    }

  /* punem serverul sa asculte daca vin clienti sa se conecteze */
  if (listen (sd, 5) == -1)
    {
      perror ("[server]Eroare la listen().\n");
      return errno;
    }

  /* servim in mod iterativ clientii... */
  while (1)
    {
      int client[2];
      int length = sizeof (from);
	  int match=0,i=0; //cat timp match e 0, meciul de sah inca e in desfasurare
      printf ("[server]Asteptam la portul %d...\n",PORT);
      fflush (stdout);

      /* acceptam un client (stare blocanta pina la realizarea conexiunii) */
      client[0] = accept (sd, (struct sockaddr *) &from, &length);

      /* eroare la acceptarea conexiunii de la un client */
      if (client[0] < 0)
	{
	  perror ("[server]Eroare la accept().\n");
	  continue;
	}
	fflush (stdout);

      /* acceptam un client (stare blocanta pina la realizarea conexiunii) */
      client[1] = accept (sd, (struct sockaddr *) &from, &length);

      /* eroare la acceptarea conexiunii de la un client */
      if (client[1] < 0)
	{
	  perror ("[server]Eroare la accept().\n");
	  continue;
	}

      /* s-a realizat conexiunea, incepe meciul. primul client conectat  */
    while(match)
     {
		 /* citirea mesajului */
		 
		  if (read (client[i], array[],51) <= 0) //se citeste array-ul ce reprezinta mutarea facuta de jucatorul i
		{
		  perror ("[server]Eroare la read() de la client.\n");
		  close (client[i]);	/* inchidem conexiunea cu clientul */
		  continue;		/* continuam sa ascultam */
		}
		if(array[50]==666)//daca pe pozitia 50 a array-ului apare valoarea 666 inseamna ca meciul s-a terminat si jucatorul i a castigat
		{
			match=1;
					if (write (client[i], array[], 51) <= 0)
				{
				  perror ("[server]Eroare la write() catre client.\n");
				  break;
				}
		}
		  printf ("[server]Mesajul a fost receptionat...%s\n", msg);
		  
		  if(i==0) i=1; //schimbam jucatorul
		  else i=0;
		  /* returnam mesajul celuilalt client */
		  if (write (client[i], array[], 51) <= 0)
		{
		  perror ("[server]Eroare la write() catre client.\n");
		  continue;		/* continuam sa ascultam */
		}
		
	}
      /* am terminat cu acest client, inchidem conexiunea */
      close (client[0]);
	  close (client[1]);
    }				/* while */
}				/* main */